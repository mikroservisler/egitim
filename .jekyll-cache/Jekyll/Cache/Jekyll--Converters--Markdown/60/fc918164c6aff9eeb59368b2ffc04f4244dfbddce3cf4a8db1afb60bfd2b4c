I"û<h2 id="rabbitmq">RabbitMQ</h2>

<p>RabbitMQ smart-broker /dumb consumer modelini kullanÄ±r. Yani burada cursorâ€™Ä±n nerede kaldÄ±ÄŸÄ±nÄ± broker bilmek zorundadÄ±r. Broker mesajÄ±n iletilip iletilmediÄŸini kendisine ulaÅŸan bir acknowledge sayesinde takip eder. BÃ¶ylece mesajÄ±n consumerâ€™a iletimi garanti altÄ±na alÄ±nmÄ±ÅŸ olur.</p>

<ul>
  <li>
    <p>DezavantajlarÄ± : Consumerâ€™larÄ±n online olduÄŸunu var sayar ve acknowledge gelmediÄŸi sÃ¼rece mesajÄ±n durumunu beklemede olarak iÅŸaretler.YÃ¼ksek hacimli mesajlaÅŸma iÃ§in uygun olmayabilir.</p>
  </li>
  <li>
    <p>AvantajlarÄ± : Genel amaÃ§lÄ± kullanÄ±m iÃ§in uygundur. FarklÄ± protokoller kullanmak istiyorsanÄ±z(AMQP 0â€“9â€“1, STOMP, MQTT, AMQP 1.0)</p>
  </li>
</ul>

<p><img src="./../kaynaklar/rabbit-mq.jpeg" alt="RabbitMQ" /></p>

<h2 id="apache-kafka">Apache Kafka</h2>
<p>Kafka dumb-broker / smart consumer modelini kullanÄ±lÄ±r. Bunun anlamÄ±; broker kendisinden bir mesaj talep edildiÄŸinde o mesajÄ± verir ancak mesajÄ±n iletilip iletilmediÄŸi ile ilgilenmez veya queue iÃ§erisinde cursorâ€™Ä±n nerede kaldÄ±ÄŸÄ±nÄ± bilmez. Cursorâ€™Ä±n nerede kaldÄ±ÄŸÄ±nÄ± consumer bilmek zorundadÄ±r. Genellikle bÃ¼yÃ¼k Ã¶lÃ§ekli mesajlaÅŸma uygulamalarÄ±nda veya streaming uygulamalarÄ±nda kullanÄ±lÄ±r.</p>
:ET